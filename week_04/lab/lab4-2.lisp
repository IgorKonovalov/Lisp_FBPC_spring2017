; Прочитать из стандартного потока ввода двоичное дерево, представленное с помощью списков. Первый элемент в списке является значением узла, второй элемент – левым поддеревом (списком) или значением nil, если у данного узла нет левого потомка, третий элемент – правым поддеревом (списком) или значением nil, если у данного узла нет правого потомка. В качестве значения в узле могут храниться любые данные, в том числе целые числа. Найти сумму кратных 7 целых чисел, хранящихся в узлах дерева, расположенных на уровнях с нечетными номерами. Уровень корня принимается равным 1. Если в дереве нет удовлетворяющих условиям задачи узлов, считать сумму равной 0.

; дано (3 (14 (15 nil nil) (7 nil nil)) (5 (8 nil nil) (21 nil nil)))

; На первом уровне здесь находится узел со значением 3 (это корень), на втором – узлы со значениями 14 и 5, на третьем – узлы со значениями 15 и 7 (потомки узла 14) и узлы со значениями 8 и 21 (потомки узла 5). Обходя это дерево (в любом порядке, но учитывая номер уровня) находим, что на нечетных уровнях находятся узлы со значениями 3, 15, 7, 8 и 21. Сумма кратных 7 чисел (7 и 21) равна 28, этот результат и следует вывести в стандартный поток вывода.

(defvar *tree* '(3 (14 (15 nil nil) (7 nil nil)) (5 (8 nil nil) (21 nil nil))))

; (defvar tree (read))
(defvar sum 0)
(defvar l 0)

(defun seven-on-odd (tree &optional l)
  (if (eq l nil) (setf l 0))
  (incf l)
  (if (and (eq (mod (car tree) 7) 0) (eq (mod l 2) 1))
    (setf sum (+ sum (car tree))))
  (if (nth 1 tree) (seven-on-odd (nth 1 tree) l))
  (if (nth 2 tree) (seven-on-odd (nth 2 tree) l))
  sum)

(print (seven-on-odd *tree*))
